// https://leetcode.com/problems/convert-sorted-array-to-binary-search-tree
class TreeNode {
  constructor(val, left, right) {
    this.val = val === undefined ? 0 : val;
    this.left = left === undefined ? null : left;
    this.right = right === undefined ? null : right;
  }
}

function sortedArrayToBST(nums) {
  if (!nums.length) return null;

  function buildBST(start, end) {
    if (start > end) return null;

    const mid = Math.floor((start + end) / 2);
    const root = new TreeNode(nums[mid]);

    root.left = buildBST(start, mid - 1);
    root.right = buildBST(mid + 1, end);

    return root;
  }

  return buildBST(0, nums.length - 1);
}

// Test case 1: Empty array
const nums1 = [];
const tree1 = sortedArrayToBST(nums1);
console.log(printTree(tree1)); // Expected output: []

// Test case 2: Single element array
const nums2 = [1, 2, 3, 4, 5, 6, 7];
const tree2 = sortedArrayToBST(nums2);
console.log(printTree(tree2)); // Expected output: [4, 2, 6, 1, 3, 5, 7]

// Helper function to print tree in level order for easier verification
// NOTE: This function was generated by copilot and modified to fit the context
function printTree(root) {
  if (!root) return [];
  const queue = [root];
  const result = [];
  while (queue.length) {
    const node = queue.shift();
    result.push(node ? node.val : null);
    if (node) {
      queue.push(node.left);
      queue.push(node.right);
    }
  }
  return result;
}
